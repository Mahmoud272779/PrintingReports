// <auto-generated />
using System;
using App.Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.Infrastructure.Migrations
{
    [DbContext(typeof(ClientSqlDbContext))]
    [Migration("20231008092717_InitialDatabase")]
    partial class InitialDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("App.Domain.EditedItems", b =>
                {
                    b.Property<int>("itemId")
                        .HasColumnType("int");

                    b.Property<int>("sizeId")
                        .HasColumnType("int");

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<double>("serialize")
                        .HasColumnType("float");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.HasKey("itemId", "sizeId", "BranchID");

                    b.ToTable("EditedItems", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Chat.chat+chatGroupMembers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("groupId")
                        .HasColumnType("int");

                    b.Property<bool>("isAdmin")
                        .HasColumnType("bit");

                    b.Property<int>("memberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("groupId");

                    b.HasIndex("memberId");

                    b.ToTable("chatGroupMembers", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Chat.chat+chatGroups", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("allowReply")
                        .HasColumnType("bit");

                    b.Property<bool>("canExit")
                        .HasColumnType("bit");

                    b.Property<DateTime>("creationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("groupCreatorId")
                        .HasColumnType("int");

                    b.Property<string>("groupImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("groupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isEnded")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("groupCreatorId");

                    b.ToTable("chatGroups", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Chat.chat+chatMessages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("deleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("fromId")
                        .HasColumnType("int");

                    b.Property<int?>("groupId")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("isPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("seen")
                        .HasColumnType("bit");

                    b.Property<DateTime>("seenDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("toId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("fromId");

                    b.HasIndex("groupId");

                    b.HasIndex("toId");

                    b.ToTable("chatMessages", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Common.GLJournalEntryDraftDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CostCenterId")
                        .HasColumnType("int");

                    b.Property<double>("Credit")
                        .HasColumnType("float");

                    b.Property<double>("Debit")
                        .HasColumnType("float");

                    b.Property<string>("DescriptionAr")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DescriptionAr");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DescriptionEn");

                    b.Property<int?>("FinancialAccountId")
                        .HasColumnType("int");

                    b.Property<int>("JournalEntryDraftId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JournalEntryDraftId");

                    b.ToTable("GLJournalEntryDraftDetails", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.GlReciepts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("Authority")
                        .HasColumnType("int");

                    b.Property<int?>("BankId")
                        .HasColumnType("int");

                    b.Property<int>("BenefitId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("ChequeBankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ChequeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChequeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<int>("CollectionCode")
                        .HasColumnType("int");

                    b.Property<int?>("CompinedParentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Creditor")
                        .HasColumnType("float");

                    b.Property<double>("Debtor")
                        .HasColumnType("float");

                    b.Property<bool>("Deferre")
                        .HasColumnType("bit");

                    b.Property<int?>("EntryFundId")
                        .HasColumnType("int");

                    b.Property<int?>("FinancialAccountId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAccredit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompined")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIncludeVat")
                        .HasColumnType("bit");

                    b.Property<string>("NoteAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoteEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OtherAuthorityId")
                        .HasColumnType("int");

                    b.Property<string>("PaperNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecieptDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RecieptType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecieptTypeId")
                        .HasColumnType("int");

                    b.Property<string>("RectypeWithPayment")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("SafeID")
                        .HasColumnType("int");

                    b.Property<int?>("SalesManId")
                        .HasColumnType("int");

                    b.Property<double>("Serialize")
                        .HasColumnType("float");

                    b.Property<int>("Signal")
                        .HasColumnType("int");

                    b.Property<int>("SubTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("isPartialPaid")
                        .HasColumnType("int");

                    b.Property<int>("otherSalesManId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("FinancialAccountId");

                    b.HasIndex("OtherAuthorityId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("PersonId");

                    b.HasIndex("SafeID");

                    b.HasIndex("SalesManId");

                    b.HasIndex("RectypeWithPayment", "CollectionCode", "BranchId")
                        .IsUnique()
                        .HasFilter("[RectypeWithPayment] IS NOT NULL");

                    b.ToTable("GlReciepts", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.InvStoreBranch", b =>
                {
                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.HasKey("StoreId", "BranchId");

                    b.HasIndex("BranchId");

                    b.ToTable("InvStoreBranch", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Notification.NotificationSeen", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("NotificationsMasterId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("isAdmin")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.HasIndex("NotificationsMasterId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSeen", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Notification.NotificationsMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("cDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("insertedById")
                        .HasColumnType("int");

                    b.Property<bool>("isSystem")
                        .HasColumnType("bit");

                    b.Property<int?>("pageId")
                        .HasColumnType("int");

                    b.Property<string>("routeUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("specialUserId")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("titleEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("insertedById");

                    b.HasIndex("specialUserId");

                    b.ToTable("NotificationsMaster", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.otherSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("AllowPrintBarcode")
                        .HasColumnType("bit");

                    b.Property<bool>("PurchasesCashPayment")
                        .HasColumnType("bit");

                    b.Property<bool>("PurchasesNetPayment")
                        .HasColumnType("bit");

                    b.Property<bool>("PurchasesOtherPayment")
                        .HasColumnType("bit");

                    b.Property<bool>("accredditForAllUsers")
                        .HasColumnType("bit");

                    b.Property<bool>("allowCloseCloudPOSSession")
                        .HasColumnType("bit");

                    b.Property<bool>("canShowAllPOSSessions")
                        .HasColumnType("bit");

                    b.Property<bool>("posAddDiscount")
                        .HasColumnType("bit");

                    b.Property<bool>("posAllowCreditSales")
                        .HasColumnType("bit");

                    b.Property<bool>("posCashPayment")
                        .HasColumnType("bit");

                    b.Property<bool>("posEditOtherPersonsInv")
                        .HasColumnType("bit");

                    b.Property<bool>("posNetPayment")
                        .HasColumnType("bit");

                    b.Property<bool>("posOtherPayment")
                        .HasColumnType("bit");

                    b.Property<bool>("posShowOtherPersonsInv")
                        .HasColumnType("bit");

                    b.Property<bool>("posShowReportsOfOtherPersons")
                        .HasColumnType("bit");

                    b.Property<bool>("purchaseShowBalanceOfPerson")
                        .HasColumnType("bit");

                    b.Property<bool>("purchasesAddDiscount")
                        .HasColumnType("bit");

                    b.Property<bool>("purchasesAllowCreditSales")
                        .HasColumnType("bit");

                    b.Property<bool>("purchasesEditOtherPersonsInv")
                        .HasColumnType("bit");

                    b.Property<bool>("purchasesShowOtherPersonsInv")
                        .HasColumnType("bit");

                    b.Property<bool>("purchasesShowReportsOfOtherPersons")
                        .HasColumnType("bit");

                    b.Property<bool>("salesAddDiscount")
                        .HasColumnType("bit");

                    b.Property<bool>("salesAllowCreditSales")
                        .HasColumnType("bit");

                    b.Property<bool>("salesCashPayment")
                        .HasColumnType("bit");

                    b.Property<bool>("salesEditOtherPersonsInv")
                        .HasColumnType("bit");

                    b.Property<bool>("salesNetPayment")
                        .HasColumnType("bit");

                    b.Property<bool>("salesOtherPayment")
                        .HasColumnType("bit");

                    b.Property<bool>("salesShowBalanceOfPerson")
                        .HasColumnType("bit");

                    b.Property<bool>("salesShowOtherPersonsInv")
                        .HasColumnType("bit");

                    b.Property<bool>("salesShowReportsOfOtherPersons")
                        .HasColumnType("bit");

                    b.Property<bool>("showAllBranchesInCustomerInfo")
                        .HasColumnType("bit");

                    b.Property<bool>("showAllBranchesInSuppliersInfo")
                        .HasColumnType("bit");

                    b.Property<bool>("showCustomersOfOtherUsers")
                        .HasColumnType("bit");

                    b.Property<bool>("showDashboardForAllUsers")
                        .HasColumnType("bit");

                    b.Property<bool>("showHistory")
                        .HasColumnType("bit");

                    b.Property<bool>("showOfferPricesOfOtherUser")
                        .HasColumnType("bit");

                    b.Property<int>("userAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("userAccountId");

                    b.ToTable("otherSettings", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.OtherSettingsBanks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("gLBankId")
                        .HasColumnType("int");

                    b.Property<int>("otherSettingsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("gLBankId");

                    b.HasIndex("otherSettingsId");

                    b.ToTable("OtherSettingsBanks", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.OtherSettingsSafes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("gLSafeId")
                        .HasColumnType("int");

                    b.Property<int>("otherSettingsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("gLSafeId");

                    b.HasIndex("otherSettingsId");

                    b.ToTable("OtherSettingsSafes", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.OtherSettingsStores", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("InvStpStoresId")
                        .HasColumnType("int");

                    b.Property<int>("otherSettingsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InvStpStoresId");

                    b.HasIndex("otherSettingsId");

                    b.ToTable("OtherSettingsStores", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.permissionList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("UTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("arabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("latinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("permissionList", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.POS.POS_OfflineDevices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("DeleteWaiting")
                        .HasColumnType("bit");

                    b.Property<string>("DeviceSerial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("POS_OfflineDevices", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.POS.POSDevices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DeviceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("POSDevices");
                });

            modelBuilder.Entity("App.Domain.Entities.POS.POSInvoiceSuspension", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"), 1L, 1);

                    b.Property<bool>("ActiveDiscount")
                        .HasColumnType("bit");

                    b.Property<bool>("ApplyVat")
                        .HasColumnType("bit");

                    b.Property<string>("BookIndex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("BrowserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InvoiceSubTypesId")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAccredite")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReturn")
                        .HasColumnType("bit");

                    b.Property<double>("Net")
                        .HasColumnType("float");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Paid")
                        .HasColumnType("float");

                    b.Property<string>("ParentInvoiceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<int?>("PriceListId")
                        .HasColumnType("int");

                    b.Property<bool>("PriceWithVat")
                        .HasColumnType("bit");

                    b.Property<double>("Remain")
                        .HasColumnType("float");

                    b.Property<int?>("SalesManId")
                        .HasColumnType("int");

                    b.Property<double>("Serialize")
                        .HasColumnType("float");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<double>("TotalAfterDiscount")
                        .HasColumnType("float");

                    b.Property<double>("TotalDiscountRatio")
                        .HasColumnType("float");

                    b.Property<double>("TotalDiscountValue")
                        .HasColumnType("float");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<double>("TotalVat")
                        .HasColumnType("float");

                    b.Property<double>("VirualPaid")
                        .HasColumnType("float");

                    b.HasKey("InvoiceId");

                    b.HasIndex("BranchId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PersonId");

                    b.HasIndex("SalesManId");

                    b.HasIndex("StoreId");

                    b.ToTable("POSInvoiceSuspension", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.POS.POSInvSuspensionDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("AutoDiscount")
                        .HasColumnType("float");

                    b.Property<double>("AvgPrice")
                        .HasColumnType("float");

                    b.Property<double>("ConversionFactor")
                        .HasColumnType("float");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<double>("DiscountRatio")
                        .HasColumnType("float");

                    b.Property<double>("DiscountValue")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("date");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("ItemTypeId")
                        .HasColumnType("int");

                    b.Property<double>("MinimumPrice")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("PriceList")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<double>("ReturnQuantity")
                        .HasColumnType("float");

                    b.Property<string>("SerialTexts")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Signal")
                        .HasColumnType("int");

                    b.Property<int?>("SizeId")
                        .HasColumnType("int");

                    b.Property<double>("SplitedDiscountRatio")
                        .HasColumnType("float");

                    b.Property<double>("SplitedDiscountValue")
                        .HasColumnType("float");

                    b.Property<int>("StatusOfTrans")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<double>("TransQuantity")
                        .HasColumnType("float");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.Property<double>("VatRatio")
                        .HasColumnType("float");

                    b.Property<double>("VatValue")
                        .HasColumnType("float");

                    b.Property<int>("indexOfItem")
                        .HasColumnType("int");

                    b.Property<int>("indexOfSerialNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ItemId");

                    b.HasIndex("SizeId");

                    b.HasIndex("UnitId");

                    b.ToTable("POSInvSuspensionDetails", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.POS.POSSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("employeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("end")
                        .HasColumnType("datetime2");

                    b.Property<int?>("sessionClosedById")
                        .HasColumnType("int");

                    b.Property<int>("sessionCode")
                        .HasColumnType("int");

                    b.Property<int>("sessionStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("start")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("employeeId");

                    b.HasIndex("sessionClosedById");

                    b.HasIndex("sessionCode")
                        .IsUnique();

                    b.ToTable("POSSession", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.POS.POSSessionHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BrowserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("POSSessionId")
                        .HasColumnType("int");

                    b.Property<string>("actionAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("actionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("employeesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("POSSessionId");

                    b.HasIndex("employeesId");

                    b.ToTable("POSSessionHistory", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.POS.POSTouchSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DeviceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PosTouch_CategoryImgHeight")
                        .HasColumnType("float");

                    b.Property<double>("PosTouch_CategoryImgWidth")
                        .HasColumnType("float");

                    b.Property<bool>("PosTouch_DisplayItemPrice")
                        .HasColumnType("bit");

                    b.Property<double>("PosTouch_FontSize")
                        .HasColumnType("float");

                    b.Property<double>("PosTouch_ItemsImgHeight")
                        .HasColumnType("float");

                    b.Property<double>("PosTouch_ItemsImgWidth")
                        .HasColumnType("float");

                    b.Property<double>("PosTouch_TableWidth")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("POSTouchSettings");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.Barcode.InvBarcodeHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("BrowserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("LastTransactionAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUserAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("employeesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("employeesId");

                    b.ToTable("InvBarcodeHistory", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.Barcode.InvBarcodeItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AlignX")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AlignY")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BarcodeId")
                        .HasColumnType("int");

                    b.Property<int>("BarcodeItemType")
                        .HasColumnType("int");

                    b.Property<int>("BarcodeType")
                        .HasColumnType("int");

                    b.Property<string>("BeginSplitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Bold")
                        .HasColumnType("bit");

                    b.Property<int>("Direction")
                        .HasColumnType("int");

                    b.Property<string>("Dock")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndSplitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FontSize")
                        .HasColumnType("float");

                    b.Property<string>("FontType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsLogo")
                        .HasColumnType("bit");

                    b.Property<bool>("Italic")
                        .HasColumnType("bit");

                    b.Property<double>("PositionX")
                        .HasColumnType("float");

                    b.Property<double>("PositionY")
                        .HasColumnType("float");

                    b.Property<string>("TextContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TextType")
                        .HasColumnType("int");

                    b.Property<bool>("UnderLine")
                        .HasColumnType("bit");

                    b.Property<int>("VariableContent")
                        .HasColumnType("int");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.Property<double>("X")
                        .HasColumnType("float");

                    b.Property<double>("Y")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BarcodeId");

                    b.ToTable("InvBarcodeItems", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.Barcode.InvBarcodeTemplate", b =>
                {
                    b.Property<int>("BarcodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BarcodeId"), 1L, 1);

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrowserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BarcodeId");

                    b.ToTable("InvBarcodeTemplate", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.General_Ledger.GLCurrencyHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ArabicName");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("BrowserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CuerrncyId")
                        .HasColumnType("int");

                    b.Property<string>("DeleteTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastTransactionAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUserAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LatinName");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("employeesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("employeesId");

                    b.ToTable("GLCurrencyHistory", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.General_Ledger.GLPrinter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("char(15)")
                        .IsFixedLength();

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("GLPrinter", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.General.signalR", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("InvEmployeesId")
                        .HasColumnType("int");

                    b.Property<string>("connectionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isOnline")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("InvEmployeesId");

                    b.ToTable("signalR", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.General.SystemHistoryLogs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ActionArabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActionLatinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<int>("employeesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("employeesId");

                    b.ToTable("SystemHistoryLogs", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.General.TransferDataFromDeskTop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DateOfTransfer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TransferDataFromDeskTop", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLBalanceForLastPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("DeleteTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUserAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalIncomeList")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("GLBalanceForLastPeriod", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLBank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrowserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FinancialAccountId")
                        .HasColumnType("int");

                    b.Property<string>("LatinAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FinancialAccountId");

                    b.ToTable("GLBanks", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLBankBranch", b =>
                {
                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.HasKey("BankId", "BranchId");

                    b.HasIndex("BranchId");

                    b.ToTable("GLBankBranch", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLBanksHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("BrowserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FinancialAccountId")
                        .HasColumnType("int");

                    b.Property<string>("LastAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastTransactionAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUserAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("employeesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("employeesId");

                    b.ToTable("GLBanksHistory", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLBranch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddressAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ArabicName");

                    b.Property<string>("BrowserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LatinName");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("ManagerPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("GLBranch", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLBranchHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ArabicName");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("BrowserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("LastTransactionAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUserAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LatinName");

                    b.Property<int>("employeesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("employeesId");

                    b.ToTable("GLBranchHistory", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLCostCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ArabicName");

                    b.Property<string>("AutoCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("BrowserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CC_Nature")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("InitialBalance")
                        .HasColumnType("float");

                    b.Property<string>("LastTransactionAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUserAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LatinName");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("GLCostCenter", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLCostCenterHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ArabicName");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("BrowserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CC_Nature")
                        .HasColumnType("int");

                    b.Property<int>("CostCenterId")
                        .HasColumnType("int");

                    b.Property<string>("DeleteTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("InitialBalance")
                        .HasColumnType("float");

                    b.Property<string>("LastAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastTransactionAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUserAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LatinName");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("employeesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("employeesId");

                    b.ToTable("GLCostCenterHistory", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLCurrency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AbbrAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AbbrEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrowserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("CoinsAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoinsEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrancySymbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Factor")
                        .HasColumnType("float");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GLCurrency", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLFinancialAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccountCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ArabicName");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("BrowserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Credit")
                        .HasColumnType("float");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<double>("Debit")
                        .HasColumnType("float");

                    b.Property<string>("DeleteTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FA_Nature")
                        .HasColumnType("int");

                    b.Property<int>("FinalAccount")
                        .HasColumnType("int");

                    b.Property<int?>("HasCostCenter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("LastTransactionAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUserAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LatinName");

                    b.Property<int>("MainCode")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OpenningCredit")
                        .HasColumnType("float");

                    b.Property<double>("OpenningDebit")
                        .HasColumnType("float");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SubCode")
                        .HasColumnType("int");

                    b.Property<string>("autoCoding")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ParentId");

                    b.ToTable("GLFinancialAccount", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLFinancialAccountBranch", b =>
                {
                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("FinancialAccountId")
                        .HasColumnType("int");

                    b.HasKey("BranchId", "FinancialAccountId");

                    b.HasIndex("FinancialAccountId");

                    b.ToTable("GLFinancialAccountBranch", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLFinancialAccountForOpeningBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccountCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ArabicName");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<double>("Credit")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("Debit")
                        .HasColumnType("float");

                    b.Property<string>("DeleteTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUserAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LatinName");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GLFinancialAccountForOpeningBalance", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLFinancialAccountHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccountCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ArabicName");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("BrowserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Credit")
                        .HasColumnType("float");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<double>("Debit")
                        .HasColumnType("float");

                    b.Property<string>("DeleteTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FA_Nature")
                        .HasColumnType("int");

                    b.Property<int>("FinalAccount")
                        .HasColumnType("int");

                    b.Property<int?>("HasCostCenter")
                        .HasColumnType("int");

                    b.Property<string>("LastAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastTransactionAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUserAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LatinName");

                    b.Property<int>("MainCode")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SubCode")
                        .HasColumnType("int");

                    b.Property<int>("employeesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("employeesId");

                    b.ToTable("GLFinancialAccountHistory", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLFinancialBranch", b =>
                {
                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("FinancialId")
                        .HasColumnType("int");

                    b.Property<int?>("FinancialAccountId")
                        .HasColumnType("int");

                    b.HasKey("BranchId", "FinancialId");

                    b.HasIndex("FinancialAccountId");

                    b.ToTable("GLFinancialBranch", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLFinancialCost", b =>
                {
                    b.Property<int>("CostCenterId")
                        .HasColumnType("int");

                    b.Property<int>("FinancialAccountId")
                        .HasColumnType("int");

                    b.HasKey("CostCenterId", "FinancialAccountId");

                    b.HasIndex("FinancialAccountId");

                    b.ToTable("GLFinancialCost", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLFinancialSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AddUnderFinancialAccount")
                        .HasColumnType("bit");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("DeleteTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FinancialAccountId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAssumption")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBanks")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCustomers")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOthorAuthorities")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSalesRepresentatives")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuppliers")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTreasuries")
                        .HasColumnType("bit");

                    b.Property<string>("LastTransactionAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUserAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UseFinancialAccount")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FinancialAccountId");

                    b.ToTable("GLFinancialSetting", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLGeneralSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AutomaticCoding")
                        .HasColumnType("bit");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("DefultAccBank")
                        .HasColumnType("int");

                    b.Property<int>("DefultAccCustomer")
                        .HasColumnType("int");

                    b.Property<int>("DefultAccEmployee")
                        .HasColumnType("int");

                    b.Property<int>("DefultAccOtherAuthorities")
                        .HasColumnType("int");

                    b.Property<int>("DefultAccSafe")
                        .HasColumnType("int");

                    b.Property<int>("DefultAccSalesMan")
                        .HasColumnType("int");

                    b.Property<int>("DefultAccSupplier")
                        .HasColumnType("int");

                    b.Property<string>("DeleteTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FinancialAccountIdBank")
                        .HasColumnType("int");

                    b.Property<int>("FinancialAccountIdCustomer")
                        .HasColumnType("int");

                    b.Property<int>("FinancialAccountIdEmployee")
                        .HasColumnType("int");

                    b.Property<int>("FinancialAccountIdOtherAuthorities")
                        .HasColumnType("int");

                    b.Property<int>("FinancialAccountIdSafe")
                        .HasColumnType("int");

                    b.Property<int>("FinancialAccountIdSalesMan")
                        .HasColumnType("int");

                    b.Property<int>("FinancialAccountIdSupplier")
                        .HasColumnType("int");

                    b.Property<string>("LastTransactionAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUserAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MainCode")
                        .HasColumnType("int");

                    b.Property<int?>("SubCode")
                        .HasColumnType("int");

                    b.Property<int>("evaluationMethodOfEndOfPeriodStockType")
                        .HasColumnType("int");

                    b.Property<bool>("isFundsClosed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("GLGeneralSetting", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLIntegrationSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GLBranchId")
                        .HasColumnType("int");

                    b.Property<int>("GLFinancialAccountId")
                        .HasColumnType("int");

                    b.Property<int>("linkingMethodId")
                        .HasColumnType("int");

                    b.Property<int>("screenId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GLBranchId");

                    b.HasIndex("GLFinancialAccountId");

                    b.ToTable("GLIntegrationSettings", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLJournalEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Auto")
                        .HasColumnType("bit");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("BrowserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<int?>("CompinedReceiptCode")
                        .HasColumnType("int");

                    b.Property<double>("CreditTotal")
                        .HasColumnType("float");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<double>("DebitTotal")
                        .HasColumnType("float");

                    b.Property<string>("DeleteTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DocType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FTDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAccredit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompined")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTransfer")
                        .HasColumnType("bit");

                    b.Property<string>("LastTransactionAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUserAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReceiptsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("GLJournalEntry", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLJournalEntryDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CostCenterId")
                        .HasColumnType("int");

                    b.Property<double>("Credit")
                        .HasColumnType("float");

                    b.Property<double>("Debit")
                        .HasColumnType("float");

                    b.Property<string>("DescriptionAr")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DescriptionAr");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DescriptionEn");

                    b.Property<int?>("DocType")
                        .HasColumnType("int");

                    b.Property<int?>("FinancialAccountId")
                        .HasColumnType("int");

                    b.Property<string>("FinancialCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinancialName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JournalEntryId")
                        .HasColumnType("int");

                    b.Property<int?>("StoreFundId")
                        .HasColumnType("int");

                    b.Property<bool>("isCostSales")
                        .HasColumnType("bit");

                    b.Property<bool>("isStoreFund")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FinancialAccountId");

                    b.HasIndex("JournalEntryId");

                    b.ToTable("GLJournalEntryDetails", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLJournalEntryDetailsAccounts", b =>
                {
                    b.Property<int>("JournalEntryId")
                        .HasColumnType("int");

                    b.Property<int>("FinancialAccountId")
                        .HasColumnType("int");

                    b.HasKey("JournalEntryId", "FinancialAccountId");

                    b.HasIndex("FinancialAccountId");

                    b.ToTable("GLJournalEntryDetailsAccounts", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLJournalEntryDraft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<double>("CreditTotal")
                        .HasColumnType("float");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<double>("DebitTotal")
                        .HasColumnType("float");

                    b.Property<string>("DeleteTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FTDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<string>("LastTransactionAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUserAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GLJournalEntryDraft", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLJournalEntryFiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("File")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JournalEntryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JournalEntryId");

                    b.ToTable("GLJournalEntryFiles", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLJournalEntryFilesDraft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("File")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JournalEntryDraftId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JournalEntryDraftId");

                    b.ToTable("GLJournalEntryFilesDraft", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLOtherAuthorities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<int?>("FinancialAccountId")
                        .HasColumnType("int");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("FinancialAccountId");

                    b.ToTable("OtherAuthorities");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLOtherAuthoritiesHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AuthorityId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("BrowserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FinancialAccountId")
                        .HasColumnType("int");

                    b.Property<string>("LastAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("employeesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("userName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("employeesId");

                    b.ToTable("GLOtherAuthoritiesHistory", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLPurchasesAndSalesSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FinancialAccountId")
                        .HasColumnType("int");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MainType")
                        .HasColumnType("int");

                    b.Property<int>("ReceiptElemntID")
                        .HasColumnType("int");

                    b.Property<int>("RecieptsType")
                        .HasColumnType("int");

                    b.Property<int>("branchId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FinancialAccountId");

                    b.HasIndex("branchId");

                    b.ToTable("GLPurchasesAndSalesSettings", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLRecHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("BrowserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("DeleteTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("HistoryType")
                        .HasColumnType("int");

                    b.Property<int>("JournalEntryId")
                        .HasColumnType("int");

                    b.Property<string>("LastAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastTransactionAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUserAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MacAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("employeesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("employeesId");

                    b.ToTable("GLRecHistory", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLRecieptCostCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CostCenteCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CostCenteName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CostCenterId")
                        .HasColumnType("int");

                    b.Property<double>("Number")
                        .HasColumnType("float");

                    b.Property<double>("Percentage")
                        .HasColumnType("float");

                    b.Property<int>("SupportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("SupportId");

                    b.ToTable("GLRecieptCostCenter", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLRecieptFiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FileExtensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecieptId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecieptId");

                    b.ToTable("GLRecieptFiles", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLRecieptsHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("AuthorityType")
                        .HasColumnType("int");

                    b.Property<int>("BenefitId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("BrowserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChequeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<bool>("IsAccredit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<string>("ReceiptsAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReceiptsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecieptDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RecieptType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecieptTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SafeIDOrBank")
                        .HasColumnType("int");

                    b.Property<double>("Serialize")
                        .HasColumnType("float");

                    b.Property<int>("Signal")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("employeesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("employeesId");

                    b.ToTable("GLRecieptsHistory", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLSafe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("BrowserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<int?>("FinancialAccountId")
                        .HasColumnType("int");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("FinancialAccountId");

                    b.ToTable("GLSafe", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLSafeHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("BrowserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FinancialAccountId")
                        .HasColumnType("int");

                    b.Property<string>("LastAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastTransactionAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUserAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TreasuryId")
                        .HasColumnType("int");

                    b.Property<int>("employeesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("employeesId");

                    b.ToTable("GLSafeHistory", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsedInSales")
                        .HasColumnType("int");

                    b.Property<double>("VatValue")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("InvCategories", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvCategoriesHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("BrowserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("LastTransactionAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUserAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("employeesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("employeesId");

                    b.ToTable("InvCategoriesHistory", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvColors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("InvColors", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvColorsHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("BrowserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("LastTransactionAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUserAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("employeesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("employeesId");

                    b.ToTable("InvColorsHistory", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvCommissionList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Ratio")
                        .HasColumnType("float");

                    b.Property<double?>("Target")
                        .HasColumnType("float");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("InvCommissionList", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvCommissionListHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("BrowserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("LastTransactionAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUserAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("employeesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("employeesId");

                    b.ToTable("InvCommissionListHistory", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvCommissionSlides", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CommissionId")
                        .HasColumnType("int");

                    b.Property<double>("Ratio")
                        .HasColumnType("float");

                    b.Property<double>("SlideFrom")
                        .HasColumnType("float");

                    b.Property<int>("SlideNo")
                        .HasColumnType("int");

                    b.Property<double>("SlideTo")
                        .HasColumnType("float");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CommissionId");

                    b.ToTable("InvCommissionSlides", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvCompanyData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ArabicAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommercialRegister")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FieldAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FieldEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("imageFile")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("InvCompanyData", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvDiscount_A_P", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<double>("Creditor")
                        .HasColumnType("float");

                    b.Property<double>("Debtor")
                        .HasColumnType("float");

                    b.Property<DateTime>("DocDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocType")
                        .HasColumnType("int");

                    b.Property<bool>("IsCustomer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaperNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Refrience")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("recieptsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("InvDiscount_A_P", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvDiscount_A_P_History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("BrowserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("LastTransactionAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUserAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("employeesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("employeesId");

                    b.ToTable("InvDiscount_A_P_History", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvEmployees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<int?>("FinancialAccountId")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("FinancialAccountId");

                    b.HasIndex("JobId");

                    b.ToTable("InvEmployees", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvEmployeesHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("BrowserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("LastTransactionAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUserAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("employeesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("employeesId");

                    b.ToTable("InvEmployeesHistory", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvFundsBanksSafesDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Creditor")
                        .HasColumnType("float");

                    b.Property<double>("Debtor")
                        .HasColumnType("float");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("InvFundsBanksSafesDetails", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvFundsBanksSafesHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("BrowserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("LastTransactionAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUserAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("employeesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("employeesId");

                    b.ToTable("InvFundsBanksSafesHistory", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvFundsBanksSafesMaster", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentId"), 1L, 1);

                    b.Property<int?>("BankId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("DocDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsBank")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSafe")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SafeId")
                        .HasColumnType("int");

                    b.Property<bool>("isBlock")
                        .HasColumnType("bit");

                    b.HasKey("DocumentId");

                    b.HasIndex("BankId");

                    b.HasIndex("SafeId");

                    b.ToTable("InvFundsBanksSafesMaster", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvFundsCustomerSupplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Credit")
                        .HasColumnType("float");

                    b.Property<double>("Debit")
                        .HasColumnType("float");

                    b.Property<string>("DeleteTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("InvFundsCustomerSupplier", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvGeneralSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Accredite_EndPeriod")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Accredite_StartPeriod")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Barcode_ItemCodestart")
                        .HasColumnType("bit");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<bool>("CustomerDisplay_Active")
                        .HasColumnType("bit");

                    b.Property<int>("CustomerDisplay_CharNumber")
                        .HasColumnType("int");

                    b.Property<int>("CustomerDisplay_Code")
                        .HasColumnType("int");

                    b.Property<string>("CustomerDisplay_DefaultWord")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerDisplay_LinesNumber")
                        .HasColumnType("int");

                    b.Property<string>("CustomerDisplay_PortNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerDisplay_ScreenType")
                        .HasColumnType("int");

                    b.Property<string>("DeleteTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailHost")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmailPort")
                        .HasColumnType("int");

                    b.Property<bool>("Funds_Banks")
                        .HasColumnType("bit");

                    b.Property<bool>("Funds_Customers")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Funds_Customers_Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Funds_Items")
                        .HasColumnType("bit");

                    b.Property<bool>("Funds_Safes")
                        .HasColumnType("bit");

                    b.Property<bool>("Funds_Supplires")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Funds_Supplires_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastTransactionAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUserAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Other_AutoExtractExpireDate")
                        .HasColumnType("bit");

                    b.Property<bool>("Other_ConfirmeCustomerPhone")
                        .HasColumnType("bit");

                    b.Property<bool>("Other_ConfirmeSupplierPhone")
                        .HasColumnType("bit");

                    b.Property<int>("Other_Decimals")
                        .HasColumnType("int");

                    b.Property<bool>("Other_DemandLimitNotification")
                        .HasColumnType("bit");

                    b.Property<bool>("Other_ExpireNotificationFlag")
                        .HasColumnType("bit");

                    b.Property<int>("Other_ExpireNotificationValue")
                        .HasColumnType("int");

                    b.Property<bool>("Other_ItemsAutoCoding")
                        .HasColumnType("bit");

                    b.Property<bool>("Other_MergeItems")
                        .HasColumnType("bit");

                    b.Property<bool>("Other_PrintSerials")
                        .HasColumnType("bit");

                    b.Property<bool>("Other_ShowBalanceOfPerson")
                        .HasColumnType("bit");

                    b.Property<bool>("Other_UseRoundNumber")
                        .HasColumnType("bit");

                    b.Property<bool>("Other_ViewStorePlace")
                        .HasColumnType("bit");

                    b.Property<bool>("Other_ZeroPricesInItems")
                        .HasColumnType("bit");

                    b.Property<bool>("Pos_ActiveCashierCustody")
                        .HasColumnType("bit");

                    b.Property<bool>("Pos_ActiveDiscount")
                        .HasColumnType("bit");

                    b.Property<bool>("Pos_ActivePricesList")
                        .HasColumnType("bit");

                    b.Property<bool>("Pos_DeferredSale")
                        .HasColumnType("bit");

                    b.Property<bool>("Pos_EditingOnDate")
                        .HasColumnType("bit");

                    b.Property<bool>("Pos_ExceedDiscountRatio")
                        .HasColumnType("bit");

                    b.Property<bool>("Pos_ExceedPrices")
                        .HasColumnType("bit");

                    b.Property<bool>("Pos_ExtractWithoutQuantity")
                        .HasColumnType("bit");

                    b.Property<bool>("Pos_IndividualCoding")
                        .HasColumnType("bit");

                    b.Property<bool>("Pos_ModifyPrices")
                        .HasColumnType("bit");

                    b.Property<bool>("Pos_PreventEditingRecieptFlag")
                        .HasColumnType("bit");

                    b.Property<int>("Pos_PreventEditingRecieptValue")
                        .HasColumnType("int");

                    b.Property<bool>("Pos_PriceIncludeVat")
                        .HasColumnType("bit");

                    b.Property<bool>("Pos_PrintPreview")
                        .HasColumnType("bit");

                    b.Property<bool>("Pos_PrintWithEnding")
                        .HasColumnType("bit");

                    b.Property<bool>("Pos_UseLastPrice")
                        .HasColumnType("bit");

                    b.Property<bool>("Purchase_UpdateItemsPricesAfterInvoice")
                        .HasColumnType("bit");

                    b.Property<bool>("Purchases_ActiveDiscount")
                        .HasColumnType("bit");

                    b.Property<bool>("Purchases_ModifyPrices")
                        .HasColumnType("bit");

                    b.Property<bool>("Purchases_PayTotalNet")
                        .HasColumnType("bit");

                    b.Property<bool>("Purchases_PriceIncludeVat")
                        .HasColumnType("bit");

                    b.Property<bool>("Purchases_PrintWithSave")
                        .HasColumnType("bit");

                    b.Property<bool>("Purchases_ReturnWithoutQuantity")
                        .HasColumnType("bit");

                    b.Property<bool>("Purchases_UseLastPrice")
                        .HasColumnType("bit");

                    b.Property<bool>("Sales_ActiveDiscount")
                        .HasColumnType("bit");

                    b.Property<bool>("Sales_ActivePricesList")
                        .HasColumnType("bit");

                    b.Property<bool>("Sales_ExceedDiscountRatio")
                        .HasColumnType("bit");

                    b.Property<bool>("Sales_ExceedPrices")
                        .HasColumnType("bit");

                    b.Property<bool>("Sales_ExtractWithoutQuantity")
                        .HasColumnType("bit");

                    b.Property<bool>("Sales_LinkRepresentCustomer")
                        .HasColumnType("bit");

                    b.Property<bool>("Sales_ModifyPrices")
                        .HasColumnType("bit");

                    b.Property<bool>("Sales_PayTotalNet")
                        .HasColumnType("bit");

                    b.Property<bool>("Sales_PriceIncludeVat")
                        .HasColumnType("bit");

                    b.Property<bool>("Sales_PrintWithSave")
                        .HasColumnType("bit");

                    b.Property<bool>("Sales_UseLastPrice")
                        .HasColumnType("bit");

                    b.Property<int>("UpdateFilesNumber")
                        .HasColumnType("int");

                    b.Property<bool>("Vat_Active")
                        .HasColumnType("bit");

                    b.Property<double>("Vat_DefaultValue")
                        .HasColumnType("float");

                    b.Property<int>("autoLogoutInMints")
                        .HasColumnType("int");

                    b.Property<string>("barcodeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("otherMergeItemMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("secureSocketOptions")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("InvGeneralSettings", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvJobs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("InvJobs", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvJobsHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("BrowserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("LastTransactionAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUserAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("employeesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("employeesId");

                    b.ToTable("InvJobsHistory", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvoiceDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("AutoDiscount")
                        .HasColumnType("float");

                    b.Property<double>("AvgPrice")
                        .HasColumnType("float");

                    b.Property<string>("CodeOfflinePOS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ConversionFactor")
                        .HasColumnType("float");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<double>("DiscountRatio")
                        .HasColumnType("float");

                    b.Property<double>("DiscountValue")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("date");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("ItemTypeId")
                        .HasColumnType("int");

                    b.Property<double>("MinimumPrice")
                        .HasColumnType("float");

                    b.Property<double>("OtherAdditions")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("PriceList")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<double>("ReturnQuantity")
                        .HasColumnType("float");

                    b.Property<int>("Signal")
                        .HasColumnType("int");

                    b.Property<int?>("SizeId")
                        .HasColumnType("int");

                    b.Property<double>("SplitedDiscountRatio")
                        .HasColumnType("float");

                    b.Property<double>("SplitedDiscountValue")
                        .HasColumnType("float");

                    b.Property<int>("StatusOfTrans")
                        .HasColumnType("int");

                    b.Property<double>("TotalWithOutSplitedDiscount")
                        .HasColumnType("float");

                    b.Property<double>("TotalWithSplitedDiscount")
                        .HasColumnType("float");

                    b.Property<double>("TransQuantity")
                        .HasColumnType("float");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.Property<double>("VatRatio")
                        .HasColumnType("float");

                    b.Property<double>("VatValue")
                        .HasColumnType("float");

                    b.Property<string>("balanceBarcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("indexOfItem")
                        .HasColumnType("int");

                    b.Property<int>("indexOfSerialNo")
                        .HasColumnType("int");

                    b.Property<int?>("parentItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ItemId");

                    b.HasIndex("SizeId");

                    b.HasIndex("UnitId");

                    b.ToTable("InvoiceDetails", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvoiceFiles", b =>
                {
                    b.Property<int>("InvoiceFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceFileId"), 1L, 1);

                    b.Property<string>("FileExtensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.HasKey("InvoiceFileId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceFiles", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvoiceMaster", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"), 1L, 1);

                    b.Property<bool>("ActiveDiscount")
                        .HasColumnType("bit");

                    b.Property<double>("ActualNet")
                        .HasColumnType("float");

                    b.Property<bool>("ApplyVat")
                        .HasColumnType("bit");

                    b.Property<string>("BookIndex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("BrowserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("CodeOfflinePOS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InvoiceSubTypesId")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceTransferType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceType")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("InvoiceTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAccredite")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCollectionReceipt")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReturn")
                        .HasColumnType("bit");

                    b.Property<double>("Net")
                        .HasColumnType("float");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("POSSessionId")
                        .HasColumnType("int");

                    b.Property<double>("Paid")
                        .HasColumnType("float");

                    b.Property<string>("ParentInvoiceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<int?>("PriceListId")
                        .HasColumnType("int");

                    b.Property<bool>("PriceWithVat")
                        .HasColumnType("bit");

                    b.Property<double>("Remain")
                        .HasColumnType("float");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<int?>("SalesManId")
                        .HasColumnType("int");

                    b.Property<double>("Serialize")
                        .HasColumnType("float");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int?>("StoreIdTo")
                        .HasColumnType("int");

                    b.Property<double>("TotalAfterDiscount")
                        .HasColumnType("float");

                    b.Property<double>("TotalDiscountRatio")
                        .HasColumnType("float");

                    b.Property<double>("TotalDiscountValue")
                        .HasColumnType("float");

                    b.Property<double>("TotalOtherAdditions")
                        .HasColumnType("float");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<double>("TotalVat")
                        .HasColumnType("float");

                    b.Property<string>("TransferNotesAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransferNotesEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("VirualPaid")
                        .HasColumnType("float");

                    b.Property<int>("transferStatus")
                        .HasColumnType("int");

                    b.HasKey("InvoiceId");

                    b.HasIndex("BranchId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PersonId");

                    b.HasIndex("SalesManId");

                    b.HasIndex("StoreId");

                    b.HasIndex("StoreIdTo");

                    b.HasIndex("InvoiceType", "BranchId")
                        .IsUnique()
                        .HasFilter("[InvoiceType] IS NOT NULL");

                    b.ToTable("InvoiceMaster", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvoiceMasterHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookIndex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("BrowserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("DeleteTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastTransactionAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUserAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentInvoiceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Serialize")
                        .HasColumnType("float");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("SubType")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<int>("employeesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("employeesId");

                    b.ToTable("InvoiceMasterHistory", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvoicePaymentsMethods", b =>
                {
                    b.Property<int>("InvoicePaymentsMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoicePaymentsMethodId"), 1L, 1);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Cheque")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeOfflinePOS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("InvoicePaymentsMethodId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("InvoicePaymentsMethods", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvoiceSerialize", b =>
                {
                    b.Property<int>("InvoiceSerializeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceSerializeId"), 1L, 1);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceCode")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceTypeId")
                        .HasColumnType("int");

                    b.Property<double>("Serialize")
                        .HasColumnType("float");

                    b.HasKey("InvoiceSerializeId");

                    b.ToTable("InvoiceSerialize", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvPaymentMethods", b =>
                {
                    b.Property<int>("PaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentMethodId"), 1L, 1);

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BankId")
                        .HasColumnType("int");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SafeId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UTime")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentMethodId");

                    b.HasIndex("BankId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("SafeId");

                    b.ToTable("InvPaymentMethods", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvPaymentMethodsHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("BrowserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("LastTransactionAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUserAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("employeesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("employeesId");

                    b.ToTable("InvPaymentMethodsHistory", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvPersons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("AddToAnotherList")
                        .HasColumnType("bit");

                    b.Property<string>("AddressAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuildingNumber")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("bit");

                    b.Property<string>("City")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("CodeT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<double?>("CreditLimit")
                        .HasColumnType("float");

                    b.Property<int?>("CreditPeriod")
                        .HasColumnType("int");

                    b.Property<double?>("DiscountRatio")
                        .HasColumnType("float");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FinancialAccountId")
                        .HasColumnType("int");

                    b.Property<int?>("InvEmployeesId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCustomer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSupplier")
                        .HasColumnType("bit");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LessSalesPriceId")
                        .HasColumnType("int");

                    b.Property<string>("Neighborhood")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalNumber")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("ResponsibleAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsibleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SalesManId")
                        .HasColumnType("int");

                    b.Property<int?>("SalesPriceId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StreetName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FinancialAccountId");

                    b.HasIndex("InvEmployeesId");

                    b.HasIndex("SalesManId");

                    b.ToTable("InvPersons", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvPersons_Branches", b =>
                {
                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("BranchId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("InvPersons_Branches", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvPersonsHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("BrowserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("LastTransactionAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUserAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("employeesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("employeesId");

                    b.ToTable("InvPersonsHistory", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvPurchaseAdditionalCostsRelation", b =>
                {
                    b.Property<int>("PurchaseAdditionalCostsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseAdditionalCostsId"), 1L, 1);

                    b.Property<int>("AddtionalCostId")
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("CodeOfflinePOS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("PurchaseAdditionalCostsId");

                    b.HasIndex("AddtionalCostId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvPurchaseAdditionalCostsRelation", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvPurchasesAdditionalCosts", b =>
                {
                    b.Property<int>("PurchasesAdditionalCostsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchasesAdditionalCostsId"), 1L, 1);

                    b.Property<int>("AdditionalType")
                        .HasColumnType("int");

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UTime")
                        .HasColumnType("datetime2");

                    b.HasKey("PurchasesAdditionalCostsId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("InvPurchasesAdditionalCosts", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvSalesMan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("ApplyToCommissions")
                        .HasColumnType("bit");

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<int?>("CommissionListId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FinancialAccountId")
                        .HasColumnType("int");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CommissionListId");

                    b.HasIndex("FinancialAccountId");

                    b.ToTable("InvSalesMan", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvSalesManHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("BrowserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("LastTransactionAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUserAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("employeesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("employeesId");

                    b.ToTable("InvSalesManHistory", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvSerialTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddedInvoice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtractInvoice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAccridited")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("TransferStatus")
                        .HasColumnType("int");

                    b.Property<int>("indexOfSerialForAdd")
                        .HasColumnType("int");

                    b.Property<int>("indexOfSerialForExtract")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("StoreId");

                    b.ToTable("InvSerialTransaction", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvSizes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("InvSizes", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvSizesHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("BrowserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("LastTransactionAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUserAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("employeesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("employeesId");

                    b.ToTable("InvSizesHistory", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvStorePlaces", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("InvStorePlaces", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvStorePlacesHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("BrowserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("LastTransactionAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUserAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("employeesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("employeesId");

                    b.ToTable("InvStorePlacesHistory", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvStoresHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("BrowserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("LastTransactionAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUserAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("employeesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("employeesId");

                    b.ToTable("InvStoresHistory", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvStpStores", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddressAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GLBranchId")
                        .HasColumnType("int");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("GLBranchId");

                    b.ToTable("InvStpStores", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvStpUnits", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("InvStpUnits", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvUnitsHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("BrowserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("LastTransactionAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUserAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("employeesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("employeesId");

                    b.ToTable("InvUnitsHistory", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.OfferPriceDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("AutoDiscount")
                        .HasColumnType("float");

                    b.Property<double>("AvgPrice")
                        .HasColumnType("float");

                    b.Property<double>("ConversionFactor")
                        .HasColumnType("float");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<double>("DiscountRatio")
                        .HasColumnType("float");

                    b.Property<double>("DiscountValue")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("date");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("ItemTypeId")
                        .HasColumnType("int");

                    b.Property<double>("MinimumPrice")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("PriceList")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<double>("ReturnQuantity")
                        .HasColumnType("float");

                    b.Property<int>("Signal")
                        .HasColumnType("int");

                    b.Property<int?>("SizeId")
                        .HasColumnType("int");

                    b.Property<double>("SplitedDiscountRatio")
                        .HasColumnType("float");

                    b.Property<double>("SplitedDiscountValue")
                        .HasColumnType("float");

                    b.Property<int>("StatusOfTrans")
                        .HasColumnType("int");

                    b.Property<double>("TotalWithOutSplitedDiscount")
                        .HasColumnType("float");

                    b.Property<double>("TotalWithSplitedDiscount")
                        .HasColumnType("float");

                    b.Property<double>("TransQuantity")
                        .HasColumnType("float");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.Property<double>("VatRatio")
                        .HasColumnType("float");

                    b.Property<double>("VatValue")
                        .HasColumnType("float");

                    b.Property<string>("balanceBarcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("indexOfItem")
                        .HasColumnType("int");

                    b.Property<int>("indexOfSerialNo")
                        .HasColumnType("int");

                    b.Property<int?>("parentItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ItemId");

                    b.HasIndex("SizeId");

                    b.HasIndex("UnitId");

                    b.ToTable("OfferPriceDetails", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.OfferPriceMaster", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"), 1L, 1);

                    b.Property<bool>("ActiveDiscount")
                        .HasColumnType("bit");

                    b.Property<bool>("ApplyVat")
                        .HasColumnType("bit");

                    b.Property<string>("BookIndex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("BrowserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InvoiceSubTypesId")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceTransferType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceType")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("InvoiceTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAccredite")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReturn")
                        .HasColumnType("bit");

                    b.Property<double>("Net")
                        .HasColumnType("float");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Paid")
                        .HasColumnType("float");

                    b.Property<string>("ParentInvoiceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<int?>("PriceListId")
                        .HasColumnType("int");

                    b.Property<bool>("PriceWithVat")
                        .HasColumnType("bit");

                    b.Property<double>("Remain")
                        .HasColumnType("float");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<int?>("SalesManId")
                        .HasColumnType("int");

                    b.Property<double>("Serialize")
                        .HasColumnType("float");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<double>("TotalAfterDiscount")
                        .HasColumnType("float");

                    b.Property<double>("TotalDiscountRatio")
                        .HasColumnType("float");

                    b.Property<double>("TotalDiscountValue")
                        .HasColumnType("float");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<double>("TotalVat")
                        .HasColumnType("float");

                    b.Property<string>("TransferNotesAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransferNotesEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("VirualPaid")
                        .HasColumnType("float");

                    b.Property<int>("transferStatus")
                        .HasColumnType("int");

                    b.HasKey("InvoiceId");

                    b.HasIndex("BranchId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("InvoiceType")
                        .IsUnique()
                        .HasFilter("[InvoiceType] IS NOT NULL");

                    b.HasIndex("PersonId");

                    b.HasIndex("SalesManId");

                    b.HasIndex("StoreId");

                    b.ToTable("OfferPriceMaster", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.RecHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("HistoryType")
                        .HasColumnType("int");

                    b.Property<string>("MacAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RecHistory", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.Store.Barcode.BarcodePrintFiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("File")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("LatineName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BarcodePrintFiles");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.Store.DeletedRecords", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("RecordID")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DeletedRecords");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.Store.InvEmployeeBranch", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<bool>("current")
                        .HasColumnType("bit");

                    b.HasKey("EmployeeId", "BranchId");

                    b.HasIndex("BranchId");

                    b.ToTable("InvEmployeesBranches", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.Store.InvPersonLastPrice", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("invoiceTypeId")
                        .HasColumnType("int");

                    b.Property<int>("itemId")
                        .HasColumnType("int");

                    b.Property<int>("personId")
                        .HasColumnType("int");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.Property<int>("unitId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("InvPersonLastPrice", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.Store.InvPurchasesAdditionalCostsHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("BrowserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("LastTransactionAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUserAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("employeesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("employeesId");

                    b.ToTable("InvPurchasesAdditionalCostsHistory", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.Store.InvSalesMan_Branches", b =>
                {
                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("SalesManId")
                        .HasColumnType("int");

                    b.HasKey("BranchId", "SalesManId");

                    b.HasIndex("SalesManId");

                    b.ToTable("InvSalesMan_Branches", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Process.SubCodeLevels", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GLGeneralSettingId")
                        .HasColumnType("int");

                    b.Property<int>("value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GLGeneralSettingId");

                    b.ToTable("subCodeLevels");
                });

            modelBuilder.Entity("App.Domain.Entities.rules", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("UTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("applicationId")
                        .HasColumnType("int");

                    b.Property<string>("arabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isAdd")
                        .HasColumnType("bit");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("isEdit")
                        .HasColumnType("bit");

                    b.Property<bool>("isPrint")
                        .HasColumnType("bit");

                    b.Property<bool>("isShow")
                        .HasColumnType("bit");

                    b.Property<bool>("isVisible")
                        .HasColumnType("bit");

                    b.Property<string>("latinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("mainFormCode")
                        .HasColumnType("int");

                    b.Property<int>("permissionListId")
                        .HasColumnType("int");

                    b.Property<int>("subFormCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("permissionListId");

                    b.ToTable("rules");
                });

            modelBuilder.Entity("App.Domain.Entities.Setup.InvStpItemCardHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("BrowserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("LastTransactionAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastTransactionUserAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("employeesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("employeesId");

                    b.ToTable("InvStpItemCardHistory", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Setup.InvStpItemCardMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("ApplyVAT")
                        .HasColumnType("bit");

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("DefaultStoreId")
                        .HasColumnType("int");

                    b.Property<int?>("DepositeUnit")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalBarcode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ReportUnit")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("UsedInSales")
                        .HasColumnType("bit");

                    b.Property<double>("VAT")
                        .HasColumnType("float");

                    b.Property<int?>("WithdrawUnit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DefaultStoreId");

                    b.HasIndex("GroupId");

                    b.HasIndex("ItemCode")
                        .IsUnique();

                    b.HasIndex("NationalBarcode")
                        .IsUnique()
                        .HasFilter("[NationalBarcode] IS NOT NULL");

                    b.ToTable("InvStpItemMaster", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Setup.InvStpItemCardParts", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("PartId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("ItemId", "PartId");

                    b.HasIndex("PartId");

                    b.HasIndex("UnitId");

                    b.ToTable("InvStpItemCardParts", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Setup.InvStpItemCardSerials", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("SerialNo")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ItemId", "SerialNo");

                    b.HasAlternateKey("SerialNo");

                    b.ToTable("InvStpItemCardSerials", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Setup.InvStpItemCardStores", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<decimal>("DemandLimit")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("ItemId", "StoreId");

                    b.HasIndex("StoreId");

                    b.ToTable("InvStpItemStores", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Setup.InvStpItemCardUnit", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ConversionFactor")
                        .HasColumnType("float");

                    b.Property<double>("PurchasePrice")
                        .HasColumnType("float");

                    b.Property<double>("SalePrice1")
                        .HasColumnType("float");

                    b.Property<double>("SalePrice2")
                        .HasColumnType("float");

                    b.Property<double>("SalePrice3")
                        .HasColumnType("float");

                    b.Property<double>("SalePrice4")
                        .HasColumnType("float");

                    b.Property<bool>("WillDelete")
                        .HasColumnType("bit");

                    b.HasKey("ItemId", "UnitId");

                    b.HasIndex("UnitId");

                    b.ToTable("InvStpItemUnit", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Setup.InvStpItemColorSize", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<int?>("ColorId")
                        .HasColumnType("int");

                    b.Property<int?>("SizeId")
                        .HasColumnType("int");

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PurchasePrice")
                        .HasColumnType("float");

                    b.Property<double>("SalePrice1")
                        .HasColumnType("float");

                    b.Property<double>("SalePrice2")
                        .HasColumnType("float");

                    b.Property<double>("SalePrice3")
                        .HasColumnType("float");

                    b.Property<double>("SalePrice4")
                        .HasColumnType("float");

                    b.Property<bool>("WillDelete")
                        .HasColumnType("bit");

                    b.HasKey("ItemId", "UnitId", "ColorId", "SizeId");

                    b.HasIndex("ColorId");

                    b.HasIndex("SizeId");

                    b.HasIndex("UnitId");

                    b.ToTable("InvStpItemColorSize", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.signinLogs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("isLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("isLogout")
                        .HasColumnType("bit");

                    b.Property<DateTime>("lastActionTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("logoutDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("signinDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("stayLoggedin")
                        .HasColumnType("bit");

                    b.Property<string>("token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userAccountid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("userAccountid");

                    b.ToTable("signinLogs");
                });

            modelBuilder.Entity("App.Domain.Entities.userAccount", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("employeesId")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("permissionListId")
                        .HasColumnType("int");

                    b.Property<string>("username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("employeesId");

                    b.HasIndex("permissionListId");

                    b.ToTable("userAccount", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.UserAndPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("UTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("permissionListId")
                        .HasColumnType("int");

                    b.Property<int>("userAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("permissionListId");

                    b.HasIndex("userAccountId");

                    b.ToTable("UserAndPermission", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.userBranches", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GLBranchId")
                        .HasColumnType("int");

                    b.Property<int>("userAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GLBranchId");

                    b.HasIndex("userAccountId");

                    b.ToTable("userBranches", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.usersForgetPassword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("usersForgetPassword", (string)null);
                });

            modelBuilder.Entity("App.Domain.ReportFiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("Files")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsArabic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int>("IsReport")
                        .HasColumnType("int");

                    b.Property<string>("ReportFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportFileNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("uTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("reportFiles");
                });

            modelBuilder.Entity("App.Domain.ReportManger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArabicFilenameId")
                        .HasColumnType("int");

                    b.Property<int>("Copies")
                        .HasColumnType("int");

                    b.Property<bool>("IsArabic")
                        .HasColumnType("bit");

                    b.Property<int>("screenId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArabicFilenameId");

                    b.HasIndex("screenId");

                    b.ToTable("ReportManger", (string)null);
                });

            modelBuilder.Entity("App.Domain.ScreenName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ScreenNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScreenNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("screenNames");
                });

            modelBuilder.Entity("App.Domain.Entities.Chat.chat+chatGroupMembers", b =>
                {
                    b.HasOne("App.Domain.Entities.Chat.chat+chatGroups", "group")
                        .WithMany("chatGroupMembers")
                        .HasForeignKey("groupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "invEmployeeMember")
                        .WithMany("chatGroupMembers")
                        .HasForeignKey("memberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("group");

                    b.Navigation("invEmployeeMember");
                });

            modelBuilder.Entity("App.Domain.Entities.Chat.chat+chatGroups", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "groupCreator")
                        .WithMany("chatGroups")
                        .HasForeignKey("groupCreatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("groupCreator");
                });

            modelBuilder.Entity("App.Domain.Entities.Chat.chat+chatMessages", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "InvEmployeesFrom")
                        .WithMany("chatMessagesFrom")
                        .HasForeignKey("fromId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Chat.chat+chatGroups", "group")
                        .WithMany("chatMessages")
                        .HasForeignKey("groupId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "InvEmployeesTo")
                        .WithMany("chatMessagesTo")
                        .HasForeignKey("toId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("InvEmployeesFrom");

                    b.Navigation("InvEmployeesTo");

                    b.Navigation("group");
                });

            modelBuilder.Entity("App.Domain.Entities.Common.GLJournalEntryDraftDetails", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.GLJournalEntryDraft", "JournalEntryDraft")
                        .WithMany("journalEntryDraftDetails")
                        .HasForeignKey("JournalEntryDraftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JournalEntryDraft");
                });

            modelBuilder.Entity("App.Domain.Entities.GlReciepts", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.GLBank", "Banks")
                        .WithMany("reciept")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("App.Domain.Entities.Process.GLFinancialAccount", "FinancialAccount")
                        .WithMany("reciepts")
                        .HasForeignKey("FinancialAccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("App.Domain.Entities.Process.GLOtherAuthorities", "OtherAuthorities")
                        .WithMany("reciept")
                        .HasForeignKey("OtherAuthorityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("App.Domain.Entities.Process.InvPaymentMethods", "PaymentMethods")
                        .WithMany("Receipts")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Process.InvPersons", "person")
                        .WithMany("reciept")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("App.Domain.Entities.Process.GLSafe", "Safes")
                        .WithMany("reciept")
                        .HasForeignKey("SafeID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("App.Domain.Entities.Process.InvSalesMan", "SalesMan")
                        .WithMany("reciept")
                        .HasForeignKey("SalesManId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Banks");

                    b.Navigation("FinancialAccount");

                    b.Navigation("OtherAuthorities");

                    b.Navigation("PaymentMethods");

                    b.Navigation("Safes");

                    b.Navigation("SalesMan");

                    b.Navigation("person");
                });

            modelBuilder.Entity("App.Domain.Entities.InvStoreBranch", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.GLBranch", "Branch")
                        .WithMany("StoreBranches")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Process.InvStpStores", "Store")
                        .WithMany("StoreBranches")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("App.Domain.Entities.Notification.NotificationSeen", b =>
                {
                    b.HasOne("App.Domain.Entities.Notification.NotificationsMaster", "NotificationsMaster")
                        .WithMany("NotificationSeen")
                        .HasForeignKey("NotificationsMasterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "user")
                        .WithMany("NotificationSeen")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("NotificationsMaster");

                    b.Navigation("user");
                });

            modelBuilder.Entity("App.Domain.Entities.Notification.NotificationsMaster", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "insertedBy")
                        .WithMany("NotificationsMaster_insertedBy")
                        .HasForeignKey("insertedById");

                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "specialUser")
                        .WithMany("NotificationsMaster")
                        .HasForeignKey("specialUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("insertedBy");

                    b.Navigation("specialUser");
                });

            modelBuilder.Entity("App.Domain.Entities.otherSettings", b =>
                {
                    b.HasOne("App.Domain.Entities.userAccount", "userAccount")
                        .WithMany("otherSettings")
                        .HasForeignKey("userAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("userAccount");
                });

            modelBuilder.Entity("App.Domain.Entities.OtherSettingsBanks", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.GLBank", "GLBank")
                        .WithMany("OtherSettingsBanks")
                        .HasForeignKey("gLBankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.otherSettings", "otherSettings")
                        .WithMany("otherSettingsBanks")
                        .HasForeignKey("otherSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GLBank");

                    b.Navigation("otherSettings");
                });

            modelBuilder.Entity("App.Domain.Entities.OtherSettingsSafes", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.GLSafe", "GLSafe")
                        .WithMany("OtherSettingsSafes")
                        .HasForeignKey("gLSafeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.otherSettings", "otherSettings")
                        .WithMany("otherSettingsSafes")
                        .HasForeignKey("otherSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GLSafe");

                    b.Navigation("otherSettings");
                });

            modelBuilder.Entity("App.Domain.Entities.OtherSettingsStores", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvStpStores", "InvStpStores")
                        .WithMany("OtherSettingsStores")
                        .HasForeignKey("InvStpStoresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.otherSettings", "otherSettings")
                        .WithMany("OtherSettingsStores")
                        .HasForeignKey("otherSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvStpStores");

                    b.Navigation("otherSettings");
                });

            modelBuilder.Entity("App.Domain.Entities.POS.POSInvoiceSuspension", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.GLBranch", "Branch")
                        .WithMany("POSInvoiceSuspension")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "Employee")
                        .WithMany("POSInvoiceSuspension")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Process.InvPersons", "Person")
                        .WithMany("POSInvoiceSuspension")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("App.Domain.Entities.Process.InvSalesMan", "salesMan")
                        .WithMany("POSInvoiceSuspension")
                        .HasForeignKey("SalesManId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("App.Domain.Entities.Process.InvStpStores", "store")
                        .WithMany("POSInvoiceSuspension")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Employee");

                    b.Navigation("Person");

                    b.Navigation("salesMan");

                    b.Navigation("store");
                });

            modelBuilder.Entity("App.Domain.Entities.POS.POSInvSuspensionDetails", b =>
                {
                    b.HasOne("App.Domain.Entities.POS.POSInvoiceSuspension", "POSInvoiceSuspension")
                        .WithMany("POSInvSuspensionDetails")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Setup.InvStpItemCardMaster", "Items")
                        .WithMany("POSInvSuspensionDetails")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Process.InvSizes", "Sizes")
                        .WithMany("POSInvSuspensionDetails")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("App.Domain.Entities.Process.InvStpUnits", "Units")
                        .WithMany("POSInvSuspensionDetails")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Items");

                    b.Navigation("POSInvoiceSuspension");

                    b.Navigation("Sizes");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("App.Domain.Entities.POS.POSSession", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "employee")
                        .WithMany("pOSSessionsStart")
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "employeeCloseSeassion")
                        .WithMany("pOSSessionsEnd")
                        .HasForeignKey("sessionClosedById");

                    b.Navigation("employee");

                    b.Navigation("employeeCloseSeassion");
                });

            modelBuilder.Entity("App.Domain.Entities.POS.POSSessionHistory", b =>
                {
                    b.HasOne("App.Domain.Entities.POS.POSSession", "POSSession")
                        .WithMany("pOSSessionHistories")
                        .HasForeignKey("POSSessionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "employees")
                        .WithMany("pOSSessionHistories")
                        .HasForeignKey("employeesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("POSSession");

                    b.Navigation("employees");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.Barcode.InvBarcodeHistory", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "employees")
                        .WithMany()
                        .HasForeignKey("employeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employees");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.Barcode.InvBarcodeItems", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.Barcode.InvBarcodeTemplate", "BarcodeTemplate")
                        .WithMany("BarcodeItems")
                        .HasForeignKey("BarcodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BarcodeTemplate");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.General_Ledger.GLCurrencyHistory", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "employees")
                        .WithMany()
                        .HasForeignKey("employeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employees");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.General_Ledger.GLPrinter", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.GLBranch", "Branchs")
                        .WithMany("gLPrinter")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branchs");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.General.signalR", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "InvEmployees")
                        .WithMany("signalR")
                        .HasForeignKey("InvEmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvEmployees");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.General.SystemHistoryLogs", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.GLBranch", "GLBranch")
                        .WithMany("SystemHistoryLogs")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "employees")
                        .WithMany("SystemHistoryLogs")
                        .HasForeignKey("employeesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("GLBranch");

                    b.Navigation("employees");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLBank", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.GLFinancialAccount", "FinancialAccount")
                        .WithMany("Banks")
                        .HasForeignKey("FinancialAccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("FinancialAccount");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLBankBranch", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.GLBank", "Bank")
                        .WithMany("BankBranches")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Process.GLBranch", "Branch")
                        .WithMany("BankBranches")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLBanksHistory", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "employees")
                        .WithMany()
                        .HasForeignKey("employeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employees");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLBranchHistory", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "employees")
                        .WithMany()
                        .HasForeignKey("employeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employees");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLCostCenter", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.GLCostCenter", "Cost_Center")
                        .WithMany("costCenters")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Cost_Center");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLCostCenterHistory", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "employees")
                        .WithMany()
                        .HasForeignKey("employeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employees");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLFinancialAccount", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.GLCurrency", "Currency")
                        .WithMany("financialAccounts")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Process.GLFinancialAccount", "financialAccount")
                        .WithMany("financialAccounts")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Currency");

                    b.Navigation("financialAccount");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLFinancialAccountBranch", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.GLBranch", "Branch")
                        .WithMany("FinancialCosts")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Process.GLFinancialAccount", "FinancialAccount")
                        .WithMany("financialAccountBranches")
                        .HasForeignKey("FinancialAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("FinancialAccount");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLFinancialAccountHistory", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "employees")
                        .WithMany()
                        .HasForeignKey("employeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employees");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLFinancialBranch", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.GLBranch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Process.GLFinancialAccount", "FinancialAccount")
                        .WithMany()
                        .HasForeignKey("FinancialAccountId");

                    b.Navigation("Branch");

                    b.Navigation("FinancialAccount");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLFinancialCost", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.GLCostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Process.GLFinancialAccount", "FinancialAccount")
                        .WithMany("financialCosts")
                        .HasForeignKey("FinancialAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CostCenter");

                    b.Navigation("FinancialAccount");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLFinancialSetting", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.GLFinancialAccount", "FinancialAccount")
                        .WithMany("financialSettings")
                        .HasForeignKey("FinancialAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FinancialAccount");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLIntegrationSettings", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.GLBranch", "GLBranch")
                        .WithMany("gLIntegrationSettings")
                        .HasForeignKey("GLBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Process.GLFinancialAccount", "GLFinancialAccount")
                        .WithMany("gLIntegrationSettings")
                        .HasForeignKey("GLFinancialAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("GLBranch");

                    b.Navigation("GLFinancialAccount");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLJournalEntry", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.GLCurrency", "currency")
                        .WithMany("journalEntry")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("currency");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLJournalEntryDetails", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.GLFinancialAccount", "GLFinancialAccount")
                        .WithMany("GLJournalEntryDetails")
                        .HasForeignKey("FinancialAccountId");

                    b.HasOne("App.Domain.Entities.Process.GLJournalEntry", "journalEntry")
                        .WithMany("JournalEntryDetails")
                        .HasForeignKey("JournalEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GLFinancialAccount");

                    b.Navigation("journalEntry");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLJournalEntryDetailsAccounts", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.GLFinancialAccount", "FinancialAccount")
                        .WithMany("journalEntryDetailsAccounts")
                        .HasForeignKey("FinancialAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Process.GLJournalEntry", "JournalEntry")
                        .WithMany("JournalEntryDetailsAccounts")
                        .HasForeignKey("JournalEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FinancialAccount");

                    b.Navigation("JournalEntry");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLJournalEntryFiles", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.GLJournalEntry", "JournalEntry")
                        .WithMany("journalEntryFiles")
                        .HasForeignKey("JournalEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JournalEntry");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLJournalEntryFilesDraft", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.GLJournalEntryDraft", "journalEntryDraft")
                        .WithMany("journalEntryFilesDrafts")
                        .HasForeignKey("JournalEntryDraftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("journalEntryDraft");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLOtherAuthorities", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.GLBranch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Process.GLFinancialAccount", "FinancialAccount")
                        .WithMany()
                        .HasForeignKey("FinancialAccountId");

                    b.Navigation("Branch");

                    b.Navigation("FinancialAccount");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLOtherAuthoritiesHistory", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "employees")
                        .WithMany()
                        .HasForeignKey("employeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employees");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLPurchasesAndSalesSettings", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.GLFinancialAccount", "FinancialAccount")
                        .WithMany()
                        .HasForeignKey("FinancialAccountId");

                    b.HasOne("App.Domain.Entities.Process.GLBranch", "GLBranch")
                        .WithMany("GLPurchasesAndSalesSettings")
                        .HasForeignKey("branchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FinancialAccount");

                    b.Navigation("GLBranch");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLRecHistory", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "employees")
                        .WithMany()
                        .HasForeignKey("employeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employees");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLRecieptCostCenter", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.GLCostCenter", "CostCenter")
                        .WithMany("supportCostCenters")
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.GlReciepts", "Reciept")
                        .WithMany("RecieptsCostCenters")
                        .HasForeignKey("SupportId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CostCenter");

                    b.Navigation("Reciept");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLRecieptFiles", b =>
                {
                    b.HasOne("App.Domain.Entities.GlReciepts", "reciepts")
                        .WithMany("RecieptsFiles")
                        .HasForeignKey("RecieptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("reciepts");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLRecieptsHistory", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "employees")
                        .WithMany()
                        .HasForeignKey("employeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employees");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLSafe", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.GLBranch", "Branch")
                        .WithMany("Treasuries")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Process.GLFinancialAccount", "financialAccount")
                        .WithMany("Treasuries")
                        .HasForeignKey("FinancialAccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Branch");

                    b.Navigation("financialAccount");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLSafeHistory", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "employees")
                        .WithMany()
                        .HasForeignKey("employeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employees");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvCategoriesHistory", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "employees")
                        .WithMany()
                        .HasForeignKey("employeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employees");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvColorsHistory", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "employees")
                        .WithMany()
                        .HasForeignKey("employeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employees");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvCommissionListHistory", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "employees")
                        .WithMany()
                        .HasForeignKey("employeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employees");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvCommissionSlides", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvCommissionList", "CommList")
                        .WithMany("Slides")
                        .HasForeignKey("CommissionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CommList");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvDiscount_A_P", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvPersons", "Person")
                        .WithMany("Discount_A_P")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvDiscount_A_P_History", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "employees")
                        .WithMany()
                        .HasForeignKey("employeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employees");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvEmployees", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.GLFinancialAccount", "FinancialAccount")
                        .WithMany()
                        .HasForeignKey("FinancialAccountId");

                    b.HasOne("App.Domain.Entities.Process.InvJobs", "Job")
                        .WithMany("Employees")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FinancialAccount");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvEmployeesHistory", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "employees")
                        .WithMany()
                        .HasForeignKey("employeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employees");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvFundsBanksSafesDetails", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvFundsBanksSafesMaster", "FundsMaster_B_S")
                        .WithMany("FundsDetails_B_S")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FundsMaster_B_S");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvFundsBanksSafesHistory", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "employees")
                        .WithMany()
                        .HasForeignKey("employeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employees");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvFundsBanksSafesMaster", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.GLBank", "Bank")
                        .WithMany("FundsBanksSafes")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("App.Domain.Entities.Process.GLSafe", "Safe")
                        .WithMany("FundsBanksSafes")
                        .HasForeignKey("SafeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Bank");

                    b.Navigation("Safe");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvFundsCustomerSupplier", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvPersons", "Person")
                        .WithOne("FundsCustomerSuppliers")
                        .HasForeignKey("App.Domain.Entities.Process.InvFundsCustomerSupplier", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvJobsHistory", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "employees")
                        .WithMany()
                        .HasForeignKey("employeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employees");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvoiceDetails", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvoiceMaster", "InvoicesMaster")
                        .WithMany("InvoicesDetails")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Setup.InvStpItemCardMaster", "Items")
                        .WithMany("InvoicesDetails")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Process.InvSizes", "Sizes")
                        .WithMany("InvoicesDetails")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("App.Domain.Entities.Process.InvStpUnits", "Units")
                        .WithMany("InvoicesDetails")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("InvoicesMaster");

                    b.Navigation("Items");

                    b.Navigation("Sizes");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvoiceFiles", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvoiceMaster", "InvoicesMaster")
                        .WithMany("InvoiceFiles")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("InvoicesMaster");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvoiceMaster", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.GLBranch", "Branch")
                        .WithMany("InvoiceMaster")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "Employee")
                        .WithMany("invoiceMasters")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Process.InvPersons", "Person")
                        .WithMany("InvoiceMaster")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("App.Domain.Entities.Process.InvSalesMan", "salesMan")
                        .WithMany("InvoiceMaster")
                        .HasForeignKey("SalesManId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("App.Domain.Entities.Process.InvStpStores", "store")
                        .WithMany("InvoiceMaster")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Process.InvStpStores", "storeTo")
                        .WithMany("InvoiceMasterTo")
                        .HasForeignKey("StoreIdTo")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Branch");

                    b.Navigation("Employee");

                    b.Navigation("Person");

                    b.Navigation("salesMan");

                    b.Navigation("store");

                    b.Navigation("storeTo");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvoiceMasterHistory", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "employees")
                        .WithMany()
                        .HasForeignKey("employeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employees");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvoicePaymentsMethods", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvoiceMaster", "InvoicesMaster")
                        .WithMany("InvoicePaymentsMethods")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Process.InvPaymentMethods", "PaymentMethod")
                        .WithMany("InvoicesPaymentsMethods")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("InvoicesMaster");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvPaymentMethods", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.GLBank", "bank")
                        .WithMany("PaymentMethod")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("App.Domain.Entities.Process.GLSafe", "safe")
                        .WithMany("PaymentMethod")
                        .HasForeignKey("SafeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("bank");

                    b.Navigation("safe");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvPaymentMethodsHistory", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "employees")
                        .WithMany()
                        .HasForeignKey("employeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employees");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvPersons", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.GLFinancialAccount", "FinancialAccount")
                        .WithMany("persons")
                        .HasForeignKey("FinancialAccountId");

                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "InvEmployees")
                        .WithMany("InvPersons")
                        .HasForeignKey("InvEmployeesId");

                    b.HasOne("App.Domain.Entities.Process.InvSalesMan", "SalesMan")
                        .WithMany("persons")
                        .HasForeignKey("SalesManId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("FinancialAccount");

                    b.Navigation("InvEmployees");

                    b.Navigation("SalesMan");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvPersons_Branches", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.GLBranch", "Branch")
                        .WithMany("PersonBranch")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Process.InvPersons", "Person")
                        .WithMany("PersonBranch")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvPersonsHistory", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "employees")
                        .WithMany()
                        .HasForeignKey("employeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employees");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvPurchaseAdditionalCostsRelation", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvPurchasesAdditionalCosts", "InvoiceAdditionalCosts")
                        .WithMany("InvPurchaseAdditionalCostsRelations")
                        .HasForeignKey("AddtionalCostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Process.InvoiceMaster", "InvoiceMaster")
                        .WithMany("InvPurchaseAdditionalCostsRelations")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("InvoiceAdditionalCosts");

                    b.Navigation("InvoiceMaster");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvSalesMan", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvCommissionList", "CommissionList")
                        .WithMany("SalesMan")
                        .HasForeignKey("CommissionListId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("App.Domain.Entities.Process.GLFinancialAccount", "FinancialAccount")
                        .WithMany("SalesMen")
                        .HasForeignKey("FinancialAccountId");

                    b.Navigation("CommissionList");

                    b.Navigation("FinancialAccount");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvSalesManHistory", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "employees")
                        .WithMany()
                        .HasForeignKey("employeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employees");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvSerialTransaction", b =>
                {
                    b.HasOne("App.Domain.Entities.Setup.InvStpItemCardMaster", "Items")
                        .WithMany("Serials")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Process.InvStpStores", "Stores")
                        .WithMany("Serials")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Items");

                    b.Navigation("Stores");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvSizesHistory", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "employees")
                        .WithMany()
                        .HasForeignKey("employeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employees");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvStorePlacesHistory", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "employees")
                        .WithMany()
                        .HasForeignKey("employeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employees");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvStoresHistory", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "employees")
                        .WithMany()
                        .HasForeignKey("employeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employees");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvStpStores", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.GLBranch", null)
                        .WithMany("Stores")
                        .HasForeignKey("GLBranchId");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvUnitsHistory", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "employees")
                        .WithMany()
                        .HasForeignKey("employeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employees");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.OfferPriceDetails", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.OfferPriceMaster", "OfferPriceMaster")
                        .WithMany("OfferPriceDetails")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Setup.InvStpItemCardMaster", "Items")
                        .WithMany("OfferPriceDetails")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Process.InvSizes", "Sizes")
                        .WithMany("OfferPriceDetails")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("App.Domain.Entities.Process.InvStpUnits", "Units")
                        .WithMany("OfferPriceDetails")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Items");

                    b.Navigation("OfferPriceMaster");

                    b.Navigation("Sizes");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.OfferPriceMaster", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.GLBranch", "Branch")
                        .WithMany("OfferPriceMaster")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "Employee")
                        .WithMany("OfferPriceMaster")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Process.InvPersons", "Person")
                        .WithMany("OfferPriceMaster")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("App.Domain.Entities.Process.InvSalesMan", "salesMan")
                        .WithMany("OfferPriceMaster")
                        .HasForeignKey("SalesManId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("App.Domain.Entities.Process.InvStpStores", "store")
                        .WithMany("OfferPriceMaster")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Employee");

                    b.Navigation("Person");

                    b.Navigation("salesMan");

                    b.Navigation("store");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.Store.InvEmployeeBranch", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.GLBranch", "Branch")
                        .WithMany("EmployeeBranches")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "Employee")
                        .WithMany("EmployeeBranches")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.Store.InvPurchasesAdditionalCostsHistory", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "employees")
                        .WithMany()
                        .HasForeignKey("employeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employees");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.Store.InvSalesMan_Branches", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.GLBranch", "Branch")
                        .WithMany("SalesManBranch")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Process.InvSalesMan", "SalesMan")
                        .WithMany("SalesManBranch")
                        .HasForeignKey("SalesManId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("SalesMan");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.SubCodeLevels", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.GLGeneralSetting", null)
                        .WithMany("subCodeLevels")
                        .HasForeignKey("GLGeneralSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Domain.Entities.rules", b =>
                {
                    b.HasOne("App.Domain.Entities.permissionList", "permissionList")
                        .WithMany("rules")
                        .HasForeignKey("permissionListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("permissionList");
                });

            modelBuilder.Entity("App.Domain.Entities.Setup.InvStpItemCardHistory", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "employees")
                        .WithMany()
                        .HasForeignKey("employeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employees");
                });

            modelBuilder.Entity("App.Domain.Entities.Setup.InvStpItemCardMaster", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvStorePlaces", "StorePlace")
                        .WithMany("Items")
                        .HasForeignKey("DefaultStoreId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Domain.Entities.Process.InvCategories", "Category")
                        .WithMany("Items")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("StorePlace");
                });

            modelBuilder.Entity("App.Domain.Entities.Setup.InvStpItemCardParts", b =>
                {
                    b.HasOne("App.Domain.Entities.Setup.InvStpItemCardMaster", "CardMaster")
                        .WithMany("Parts")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Setup.InvStpItemCardMaster", "PartDetails")
                        .WithMany("ItemParts")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Process.InvStpUnits", "Unit")
                        .WithMany("ItemParts")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardMaster");

                    b.Navigation("PartDetails");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("App.Domain.Entities.Setup.InvStpItemCardSerials", b =>
                {
                    b.HasOne("App.Domain.Entities.Setup.InvStpItemCardMaster", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("App.Domain.Entities.Setup.InvStpItemCardStores", b =>
                {
                    b.HasOne("App.Domain.Entities.Setup.InvStpItemCardMaster", "Item")
                        .WithMany("Stores")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Process.InvStpStores", "Store")
                        .WithMany("CardStores")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("App.Domain.Entities.Setup.InvStpItemCardUnit", b =>
                {
                    b.HasOne("App.Domain.Entities.Setup.InvStpItemCardMaster", "Item")
                        .WithMany("Units")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Process.InvStpUnits", "Unit")
                        .WithMany("CardUnits")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("App.Domain.Entities.Setup.InvStpItemColorSize", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvColors", "Color")
                        .WithMany("Items")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Setup.InvStpItemCardMaster", "ItemMaster")
                        .WithMany("ColorsSizes")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Process.InvSizes", "Size")
                        .WithMany("Items")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Process.InvStpUnits", "Unit")
                        .WithMany("ItemColorsSizes")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Setup.InvStpItemCardUnit", "ItemUnit")
                        .WithMany("ItemColorsSizes")
                        .HasForeignKey("ItemId", "UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("ItemMaster");

                    b.Navigation("ItemUnit");

                    b.Navigation("Size");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("App.Domain.Entities.signinLogs", b =>
                {
                    b.HasOne("App.Domain.Entities.userAccount", "userAccount")
                        .WithMany("signinLogs")
                        .HasForeignKey("userAccountid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("userAccount");
                });

            modelBuilder.Entity("App.Domain.Entities.userAccount", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.InvEmployees", "employees")
                        .WithMany("userAccount")
                        .HasForeignKey("employeesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.permissionList", "permissionList")
                        .WithMany("userAccount")
                        .HasForeignKey("permissionListId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("employees");

                    b.Navigation("permissionList");
                });

            modelBuilder.Entity("App.Domain.Entities.UserAndPermission", b =>
                {
                    b.HasOne("App.Domain.Entities.permissionList", "permissionList")
                        .WithMany("UserAndPermission")
                        .HasForeignKey("permissionListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.userAccount", "userAccount")
                        .WithMany("UserAndPermission")
                        .HasForeignKey("userAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("permissionList");

                    b.Navigation("userAccount");
                });

            modelBuilder.Entity("App.Domain.Entities.userBranches", b =>
                {
                    b.HasOne("App.Domain.Entities.Process.GLBranch", "GLBranch")
                        .WithMany("userBranches")
                        .HasForeignKey("GLBranchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.userAccount", "userAccount")
                        .WithMany("userBranches")
                        .HasForeignKey("userAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GLBranch");

                    b.Navigation("userAccount");
                });

            modelBuilder.Entity("App.Domain.Entities.usersForgetPassword", b =>
                {
                    b.HasOne("App.Domain.Entities.userAccount", "userAccount")
                        .WithMany("usersForgetPasswords")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("userAccount");
                });

            modelBuilder.Entity("App.Domain.ReportManger", b =>
                {
                    b.HasOne("App.Domain.ReportFiles", "Files")
                        .WithMany("reportmanger")
                        .HasForeignKey("ArabicFilenameId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.ScreenName", "ScreenNames")
                        .WithMany("FileManger")
                        .HasForeignKey("screenId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Files");

                    b.Navigation("ScreenNames");
                });

            modelBuilder.Entity("App.Domain.Entities.Chat.chat+chatGroups", b =>
                {
                    b.Navigation("chatGroupMembers");

                    b.Navigation("chatMessages");
                });

            modelBuilder.Entity("App.Domain.Entities.GlReciepts", b =>
                {
                    b.Navigation("RecieptsCostCenters");

                    b.Navigation("RecieptsFiles");
                });

            modelBuilder.Entity("App.Domain.Entities.Notification.NotificationsMaster", b =>
                {
                    b.Navigation("NotificationSeen");
                });

            modelBuilder.Entity("App.Domain.Entities.otherSettings", b =>
                {
                    b.Navigation("OtherSettingsStores");

                    b.Navigation("otherSettingsBanks");

                    b.Navigation("otherSettingsSafes");
                });

            modelBuilder.Entity("App.Domain.Entities.permissionList", b =>
                {
                    b.Navigation("UserAndPermission");

                    b.Navigation("rules");

                    b.Navigation("userAccount");
                });

            modelBuilder.Entity("App.Domain.Entities.POS.POSInvoiceSuspension", b =>
                {
                    b.Navigation("POSInvSuspensionDetails");
                });

            modelBuilder.Entity("App.Domain.Entities.POS.POSSession", b =>
                {
                    b.Navigation("pOSSessionHistories");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.Barcode.InvBarcodeTemplate", b =>
                {
                    b.Navigation("BarcodeItems");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLBank", b =>
                {
                    b.Navigation("BankBranches");

                    b.Navigation("FundsBanksSafes");

                    b.Navigation("OtherSettingsBanks");

                    b.Navigation("PaymentMethod");

                    b.Navigation("reciept");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLBranch", b =>
                {
                    b.Navigation("BankBranches");

                    b.Navigation("EmployeeBranches");

                    b.Navigation("FinancialCosts");

                    b.Navigation("GLPurchasesAndSalesSettings");

                    b.Navigation("InvoiceMaster");

                    b.Navigation("OfferPriceMaster");

                    b.Navigation("POSInvoiceSuspension");

                    b.Navigation("PersonBranch");

                    b.Navigation("SalesManBranch");

                    b.Navigation("StoreBranches");

                    b.Navigation("Stores");

                    b.Navigation("SystemHistoryLogs");

                    b.Navigation("Treasuries");

                    b.Navigation("gLIntegrationSettings");

                    b.Navigation("gLPrinter");

                    b.Navigation("userBranches");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLCostCenter", b =>
                {
                    b.Navigation("costCenters");

                    b.Navigation("supportCostCenters");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLCurrency", b =>
                {
                    b.Navigation("financialAccounts");

                    b.Navigation("journalEntry");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLFinancialAccount", b =>
                {
                    b.Navigation("Banks");

                    b.Navigation("GLJournalEntryDetails");

                    b.Navigation("SalesMen");

                    b.Navigation("Treasuries");

                    b.Navigation("financialAccountBranches");

                    b.Navigation("financialAccounts");

                    b.Navigation("financialCosts");

                    b.Navigation("financialSettings");

                    b.Navigation("gLIntegrationSettings");

                    b.Navigation("journalEntryDetailsAccounts");

                    b.Navigation("persons");

                    b.Navigation("reciepts");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLGeneralSetting", b =>
                {
                    b.Navigation("subCodeLevels");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLJournalEntry", b =>
                {
                    b.Navigation("JournalEntryDetails");

                    b.Navigation("JournalEntryDetailsAccounts");

                    b.Navigation("journalEntryFiles");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLJournalEntryDraft", b =>
                {
                    b.Navigation("journalEntryDraftDetails");

                    b.Navigation("journalEntryFilesDrafts");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLOtherAuthorities", b =>
                {
                    b.Navigation("reciept");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.GLSafe", b =>
                {
                    b.Navigation("FundsBanksSafes");

                    b.Navigation("OtherSettingsSafes");

                    b.Navigation("PaymentMethod");

                    b.Navigation("reciept");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvCategories", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvColors", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvCommissionList", b =>
                {
                    b.Navigation("SalesMan");

                    b.Navigation("Slides");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvEmployees", b =>
                {
                    b.Navigation("EmployeeBranches");

                    b.Navigation("InvPersons");

                    b.Navigation("NotificationSeen");

                    b.Navigation("NotificationsMaster");

                    b.Navigation("NotificationsMaster_insertedBy");

                    b.Navigation("OfferPriceMaster");

                    b.Navigation("POSInvoiceSuspension");

                    b.Navigation("SystemHistoryLogs");

                    b.Navigation("chatGroupMembers");

                    b.Navigation("chatGroups");

                    b.Navigation("chatMessagesFrom");

                    b.Navigation("chatMessagesTo");

                    b.Navigation("invoiceMasters");

                    b.Navigation("pOSSessionHistories");

                    b.Navigation("pOSSessionsEnd");

                    b.Navigation("pOSSessionsStart");

                    b.Navigation("signalR");

                    b.Navigation("userAccount");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvFundsBanksSafesMaster", b =>
                {
                    b.Navigation("FundsDetails_B_S");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvJobs", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvoiceMaster", b =>
                {
                    b.Navigation("InvPurchaseAdditionalCostsRelations");

                    b.Navigation("InvoiceFiles");

                    b.Navigation("InvoicePaymentsMethods");

                    b.Navigation("InvoicesDetails");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvPaymentMethods", b =>
                {
                    b.Navigation("InvoicesPaymentsMethods");

                    b.Navigation("Receipts");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvPersons", b =>
                {
                    b.Navigation("Discount_A_P");

                    b.Navigation("FundsCustomerSuppliers");

                    b.Navigation("InvoiceMaster");

                    b.Navigation("OfferPriceMaster");

                    b.Navigation("POSInvoiceSuspension");

                    b.Navigation("PersonBranch");

                    b.Navigation("reciept");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvPurchasesAdditionalCosts", b =>
                {
                    b.Navigation("InvPurchaseAdditionalCostsRelations");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvSalesMan", b =>
                {
                    b.Navigation("InvoiceMaster");

                    b.Navigation("OfferPriceMaster");

                    b.Navigation("POSInvoiceSuspension");

                    b.Navigation("SalesManBranch");

                    b.Navigation("persons");

                    b.Navigation("reciept");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvSizes", b =>
                {
                    b.Navigation("InvoicesDetails");

                    b.Navigation("Items");

                    b.Navigation("OfferPriceDetails");

                    b.Navigation("POSInvSuspensionDetails");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvStorePlaces", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvStpStores", b =>
                {
                    b.Navigation("CardStores");

                    b.Navigation("InvoiceMaster");

                    b.Navigation("InvoiceMasterTo");

                    b.Navigation("OfferPriceMaster");

                    b.Navigation("OtherSettingsStores");

                    b.Navigation("POSInvoiceSuspension");

                    b.Navigation("Serials");

                    b.Navigation("StoreBranches");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.InvStpUnits", b =>
                {
                    b.Navigation("CardUnits");

                    b.Navigation("InvoicesDetails");

                    b.Navigation("ItemColorsSizes");

                    b.Navigation("ItemParts");

                    b.Navigation("OfferPriceDetails");

                    b.Navigation("POSInvSuspensionDetails");
                });

            modelBuilder.Entity("App.Domain.Entities.Process.OfferPriceMaster", b =>
                {
                    b.Navigation("OfferPriceDetails");
                });

            modelBuilder.Entity("App.Domain.Entities.Setup.InvStpItemCardMaster", b =>
                {
                    b.Navigation("ColorsSizes");

                    b.Navigation("InvoicesDetails");

                    b.Navigation("ItemParts");

                    b.Navigation("OfferPriceDetails");

                    b.Navigation("POSInvSuspensionDetails");

                    b.Navigation("Parts");

                    b.Navigation("Serials");

                    b.Navigation("Stores");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("App.Domain.Entities.Setup.InvStpItemCardUnit", b =>
                {
                    b.Navigation("ItemColorsSizes");
                });

            modelBuilder.Entity("App.Domain.Entities.userAccount", b =>
                {
                    b.Navigation("UserAndPermission");

                    b.Navigation("otherSettings");

                    b.Navigation("signinLogs");

                    b.Navigation("userBranches");

                    b.Navigation("usersForgetPasswords");
                });

            modelBuilder.Entity("App.Domain.ReportFiles", b =>
                {
                    b.Navigation("reportmanger");
                });

            modelBuilder.Entity("App.Domain.ScreenName", b =>
                {
                    b.Navigation("FileManger");
                });
#pragma warning restore 612, 618
        }
    }
}
